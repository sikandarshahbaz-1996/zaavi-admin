{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 196, "column": 0}, "map": {"version":3,"sources":["file:///Users/sikandarshahbaz/Desktop/Code/internal/zaavi/zaavi-admin/src/app/api/twilio-logs/route.js"],"sourcesContent":["// app/api/twilio-logs/route.js\nimport { NextResponse } from \"next/server\";\nimport twilio from \"twilio\";\n\nasync function fetchUsdToCadRate() {\n  const res = await fetch(\"https://api.frankfurter.app/latest?from=USD&to=CAD\");\n  if (!res.ok) return 1.42;\n  const data = await res.json();\n  return data.rates?.CAD || 1.42;\n}\n\nconst accountSid = process.env.TWILIO_ACCOUNT_SID;\nconst authToken = process.env.TWILIO_AUTH_TOKEN;\nconst client = twilio(accountSid, authToken);\n\nconst monthlyFeeMapUsd = {\n  \"+17073832531\": 0\n};\n\nfunction cleanNumber(num) {\n  return num.replace(/^whatsapp:/, \"\").replace(/\\s+/g, \"\");\n}\n\nexport async function GET(req) {\n  const url = new URL(req.url);\n  const month = parseInt(url.searchParams.get(\"month\")) || 1;\n  const year = parseInt(url.searchParams.get(\"year\")) || 2025;\n  const usdToCadRate = await fetchUsdToCadRate();\n\n  const incomingNumbers = await client.incomingPhoneNumbers.list({ limit: 100 });\n  const phoneNameMap = {};\n  incomingNumbers.forEach((pn) => {\n    const cleaned = cleanNumber(pn.phoneNumber);\n    phoneNameMap[cleaned] = pn.friendlyName;\n  });\n\n  const allCalls = await client.calls.list({ limit: 1000 });\n  const filteredCalls = allCalls.filter((call) => {\n    const start = new Date(call.startTime);\n    return start.getMonth() + 1 === month && start.getFullYear() === year;\n  });\n\n  const allMessages = await client.messages.list({ limit: 1000 });\n  const filteredMessages = allMessages.filter((msg) => {\n    const date = new Date(msg.dateSent);\n    return date.getMonth() + 1 === month && date.getFullYear() === year;\n  });\n\n  const usageByNumber = {};\n  function ensurePhoneEntry(phone) {\n    if (!usageByNumber[phone]) {\n      usageByNumber[phone] = {\n        friendlyName: phoneNameMap[phone] || \"\",\n        inboundMinutes: 0,\n        outboundMinutes: 0,\n        inboundSms: 0,\n        outboundSms: 0,\n        totalSpentUSD: 0\n      };\n    }\n    return usageByNumber[phone];\n  }\n\n  filteredCalls.forEach((call) => {\n    const durationSeconds = parseInt(call.duration, 10) || 0;\n    const durationMinutes = durationSeconds / 60;\n    const price = Math.abs(Number(call.price || 0));\n    if (call.direction.includes(\"inbound\")) {\n      const toNum = cleanNumber(call.to);\n      if (!phoneNameMap[toNum]) return;\n      const entry = ensurePhoneEntry(toNum);\n      entry.inboundMinutes += durationMinutes;\n      entry.totalSpentUSD += price;\n    } else {\n      const fromNum = cleanNumber(call.from);\n      if (!phoneNameMap[fromNum]) return;\n      const entry = ensurePhoneEntry(fromNum);\n      entry.outboundMinutes += durationMinutes;\n      entry.totalSpentUSD += price;\n    }\n  });\n\n  filteredMessages.forEach((msg) => {\n    const price = Math.abs(Number(msg.price || 0));\n    if (msg.direction.includes(\"inbound\")) {\n      const toNum = cleanNumber(msg.to);\n      if (!phoneNameMap[toNum]) return;\n      const entry = ensurePhoneEntry(toNum);\n      entry.inboundSms += 1;\n      entry.totalSpentUSD += price;\n    } else {\n      const fromNum = cleanNumber(msg.from);\n      if (!phoneNameMap[fromNum]) return;\n      const entry = ensurePhoneEntry(fromNum);\n      entry.outboundSms += 1;\n      entry.totalSpentUSD += price;\n    }\n  });\n\n  const result = Object.keys(usageByNumber).map((phone) => {\n    const data = usageByNumber[phone];\n    const usageSpentCad = data.totalSpentUSD * usdToCadRate;\n    const monthlyFeeUsd = monthlyFeeMapUsd[phone] !== undefined ? monthlyFeeMapUsd[phone] : 1.50;\n    const monthlyFeeCad = monthlyFeeUsd * usdToCadRate;\n    const grandTotalCad = usageSpentCad + monthlyFeeCad;\n    return {\n      number: phone,\n      friendlyName: data.friendlyName,\n      inboundMinutes: data.inboundMinutes.toFixed(2),\n      outboundMinutes: data.outboundMinutes.toFixed(2),\n      inboundSms: data.inboundSms,\n      outboundSms: data.outboundSms,\n      usageCost: usageSpentCad.toFixed(4),\n      monthlyFee: monthlyFeeCad.toFixed(4),\n      totalSpent: grandTotalCad.toFixed(4)\n    };\n  });\n\n  return NextResponse.json(result);\n}\n"],"names":[],"mappings":"AAAA,+BAA+B;;;;AAC/B;AACA;;;AAEA,eAAe;IACb,MAAM,MAAM,MAAM,MAAM;IACxB,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO;IACpB,MAAM,OAAO,MAAM,IAAI,IAAI;IAC3B,OAAO,KAAK,KAAK,EAAE,OAAO;AAC5B;AAEA,MAAM,aAAa,QAAQ,GAAG,CAAC,kBAAkB;AACjD,MAAM,YAAY,QAAQ,GAAG,CAAC,iBAAiB;AAC/C,MAAM,SAAS,CAAA,GAAA,wIAAA,CAAA,UAAM,AAAD,EAAE,YAAY;AAElC,MAAM,mBAAmB;IACvB,gBAAgB;AAClB;AAEA,SAAS,YAAY,GAAG;IACtB,OAAO,IAAI,OAAO,CAAC,cAAc,IAAI,OAAO,CAAC,QAAQ;AACvD;AAEO,eAAe,IAAI,GAAG;IAC3B,MAAM,MAAM,IAAI,IAAI,IAAI,GAAG;IAC3B,MAAM,QAAQ,SAAS,IAAI,YAAY,CAAC,GAAG,CAAC,aAAa;IACzD,MAAM,OAAO,SAAS,IAAI,YAAY,CAAC,GAAG,CAAC,YAAY;IACvD,MAAM,eAAe,MAAM;IAE3B,MAAM,kBAAkB,MAAM,OAAO,oBAAoB,CAAC,IAAI,CAAC;QAAE,OAAO;IAAI;IAC5E,MAAM,eAAe,CAAC;IACtB,gBAAgB,OAAO,CAAC,CAAC;QACvB,MAAM,UAAU,YAAY,GAAG,WAAW;QAC1C,YAAY,CAAC,QAAQ,GAAG,GAAG,YAAY;IACzC;IAEA,MAAM,WAAW,MAAM,OAAO,KAAK,CAAC,IAAI,CAAC;QAAE,OAAO;IAAK;IACvD,MAAM,gBAAgB,SAAS,MAAM,CAAC,CAAC;QACrC,MAAM,QAAQ,IAAI,KAAK,KAAK,SAAS;QACrC,OAAO,MAAM,QAAQ,KAAK,MAAM,SAAS,MAAM,WAAW,OAAO;IACnE;IAEA,MAAM,cAAc,MAAM,OAAO,QAAQ,CAAC,IAAI,CAAC;QAAE,OAAO;IAAK;IAC7D,MAAM,mBAAmB,YAAY,MAAM,CAAC,CAAC;QAC3C,MAAM,OAAO,IAAI,KAAK,IAAI,QAAQ;QAClC,OAAO,KAAK,QAAQ,KAAK,MAAM,SAAS,KAAK,WAAW,OAAO;IACjE;IAEA,MAAM,gBAAgB,CAAC;IACvB,SAAS,iBAAiB,KAAK;QAC7B,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;YACzB,aAAa,CAAC,MAAM,GAAG;gBACrB,cAAc,YAAY,CAAC,MAAM,IAAI;gBACrC,gBAAgB;gBAChB,iBAAiB;gBACjB,YAAY;gBACZ,aAAa;gBACb,eAAe;YACjB;QACF;QACA,OAAO,aAAa,CAAC,MAAM;IAC7B;IAEA,cAAc,OAAO,CAAC,CAAC;QACrB,MAAM,kBAAkB,SAAS,KAAK,QAAQ,EAAE,OAAO;QACvD,MAAM,kBAAkB,kBAAkB;QAC1C,MAAM,QAAQ,KAAK,GAAG,CAAC,OAAO,KAAK,KAAK,IAAI;QAC5C,IAAI,KAAK,SAAS,CAAC,QAAQ,CAAC,YAAY;YACtC,MAAM,QAAQ,YAAY,KAAK,EAAE;YACjC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;YAC1B,MAAM,QAAQ,iBAAiB;YAC/B,MAAM,cAAc,IAAI;YACxB,MAAM,aAAa,IAAI;QACzB,OAAO;YACL,MAAM,UAAU,YAAY,KAAK,IAAI;YACrC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;YAC5B,MAAM,QAAQ,iBAAiB;YAC/B,MAAM,eAAe,IAAI;YACzB,MAAM,aAAa,IAAI;QACzB;IACF;IAEA,iBAAiB,OAAO,CAAC,CAAC;QACxB,MAAM,QAAQ,KAAK,GAAG,CAAC,OAAO,IAAI,KAAK,IAAI;QAC3C,IAAI,IAAI,SAAS,CAAC,QAAQ,CAAC,YAAY;YACrC,MAAM,QAAQ,YAAY,IAAI,EAAE;YAChC,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;YAC1B,MAAM,QAAQ,iBAAiB;YAC/B,MAAM,UAAU,IAAI;YACpB,MAAM,aAAa,IAAI;QACzB,OAAO;YACL,MAAM,UAAU,YAAY,IAAI,IAAI;YACpC,IAAI,CAAC,YAAY,CAAC,QAAQ,EAAE;YAC5B,MAAM,QAAQ,iBAAiB;YAC/B,MAAM,WAAW,IAAI;YACrB,MAAM,aAAa,IAAI;QACzB;IACF;IAEA,MAAM,SAAS,OAAO,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;QAC7C,MAAM,OAAO,aAAa,CAAC,MAAM;QACjC,MAAM,gBAAgB,KAAK,aAAa,GAAG;QAC3C,MAAM,gBAAgB,gBAAgB,CAAC,MAAM,KAAK,YAAY,gBAAgB,CAAC,MAAM,GAAG;QACxF,MAAM,gBAAgB,gBAAgB;QACtC,MAAM,gBAAgB,gBAAgB;QACtC,OAAO;YACL,QAAQ;YACR,cAAc,KAAK,YAAY;YAC/B,gBAAgB,KAAK,cAAc,CAAC,OAAO,CAAC;YAC5C,iBAAiB,KAAK,eAAe,CAAC,OAAO,CAAC;YAC9C,YAAY,KAAK,UAAU;YAC3B,aAAa,KAAK,WAAW;YAC7B,WAAW,cAAc,OAAO,CAAC;YACjC,YAAY,cAAc,OAAO,CAAC;YAClC,YAAY,cAAc,OAAO,CAAC;QACpC;IACF;IAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;AAC3B","debugId":null}}]
}